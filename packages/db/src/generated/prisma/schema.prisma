// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prescriptionsAsDoctor  Prescription[] @relation("DoctorPrescriptions")
  prescriptionsAsPatient Prescription[] @relation("PatientPrescriptions")
}

model Prescription {
  id          String   @id @default(uuid())
  title       String
  description String
  doctor      User     @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  doctorId    String
  patient     User     @relation("PatientPrescriptions", fields: [patientId], references: [id])
  patientId   String
  solanaHash  String   @unique // Hash stored on-chain via Anchor
  qrCodeToken String   @unique // What gets encoded in QR code
  createdAt   DateTime @default(now())

  accessLogs QRAccessLog[]
}

model Hospital {
  id         String        @id @default(uuid())
  name       String
  location   String?
  accessLogs QRAccessLog[]
}

model QRAccessLog {
  id             String       @id @default(uuid())
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId String
  hospital       Hospital     @relation(fields: [hospitalId], references: [id])
  hospitalId     String
  scannedAt      DateTime     @default(now())
}

enum Role {
  DOCTOR
  PATIENT
}
